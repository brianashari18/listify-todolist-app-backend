// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  username       String          @db.VarChar(100)
  email          String          @unique @db.VarChar(100)
  password       String?         @db.VarChar(100)
  token          String?         @db.VarChar(255)
  otp            Int?            @unique
  otpExpire      DateTime?
  tasks          Task[]
  userWorkspaces UserWorkspace[]

  @@map("users")
}

model Task {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(100)
  color          String?         @db.VarChar(50)
  isShared       Boolean         @default(false)
  createdBy      Int
  user           User?           @relation(fields: [createdBy], references: [id])
  subTasks       SubTask[]
  userWorkspaces UserWorkspace[]

  @@map("tasks")
}

model SubTask {
  id       Int      @id @default(autoincrement())
  taskData String   @db.VarChar(255)
  deadline DateTime
  status   String
  taskId   Int
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model UserWorkspace {
  userId       Int
  taskId       Int
  accessRights Int @default(1) //1.view, 2.edit

  user User? @relation(fields: [userId], references: [id])
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([userId, taskId])
  @@map("userworkspace")
}
